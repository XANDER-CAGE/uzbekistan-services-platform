import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { useAuth } from '../../context/AuthContext';
import { usersService } from '../../services/users';
import Button from '../ui/Button';
import Input from '../ui/Input';
import { Card, CardHeader, CardContent } from '../ui/Card';
import { UserIcon, CheckIcon } from '@heroicons/react/24/outline';
import toast from 'react-hot-toast';

const EditProfileForm = () => {
  const { user, login } = useAuth();
  const [loading, setLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors, isDirty },
  } = useForm({
    defaultValues: {
      firstName: user?.firstName || '',
      lastName: user?.lastName || '',
      email: user?.email || '',
      userType: user?.userType || 'customer',
      language: user?.language || 'ru',
    }
  });

  const onSubmit = async (data) => {
    setLoading(true);
    try {
      const updatedUser = await usersService.updateProfile(data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      const token = localStorage.getItem('access_token');
      await login({ user: updatedUser, access_token: token });
      
      toast.success('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('Update error:', error);
      const message = error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è';
      toast.error(message);
    } finally {
      setLoading(false);
    }
  };

  const userTypeOptions = [
    {
      value: 'customer',
      label: '–ó–∞–∫–∞–∑—á–∏–∫',
      description: '–Ø –∑–∞–∫–∞–∑—ã–≤–∞—é —É—Å–ª—É–≥–∏',
      icon: 'üë§'
    },
    {
      value: 'executor',
      label: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
      description: '–Ø –≤—ã–ø–æ–ª–Ω—è—é –∑–∞–∫–∞–∑—ã',
      icon: 'üîß'
    },
    {
      value: 'both',
      label: '–ó–∞–∫–∞–∑—á–∏–∫ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
      description: '–Ø –∏ –∑–∞–∫–∞–∑—ã–≤–∞—é, –∏ –≤—ã–ø–æ–ª–Ω—è—é',
      icon: 'üë•'
    }
  ];

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center space-x-3">
          <div className="bg-blue-100 p-2 rounded-lg">
            <UserIcon className="w-5 h-5 text-blue-600" />
          </div>
          <div>
            <h2 className="text-lg font-semibold text-gray-900">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</h2>
            <p className="text-sm text-gray-600">–û–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ—é –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</p>
          </div>
        </div>
      </CardHeader>

      <CardContent>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          {/* –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Input
              label="–ò–º—è"
              type="text"
              required
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
              error={errors.firstName?.message}
              {...register('firstName', {
                required: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è',
                minLength: {
                  value: 2,
                  message: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞',
                },
                maxLength: {
                  value: 50,
                  message: '–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤',
                },
              })}
            />

            <Input
              label="–§–∞–º–∏–ª–∏—è"
              type="text"
              required
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
              error={errors.lastName?.message}
              {...register('lastName', {
                required: '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é',
                minLength: {
                  value: 2,
                  message: '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞',
                },
                maxLength: {
                  value: 50,
                  message: '–§–∞–º–∏–ª–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤',
                },
              })}
            />
          </div>

          {/* Email */}
          <Input
            label="Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            type="email"
            placeholder="email@example.com"
            error={errors.email?.message}
            {...register('email', {
              pattern: {
                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å',
              },
            })}
          />

          {/* –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ <span className="text-red-500">*</span>
            </label>
            <div className="space-y-3">
              {userTypeOptions.map((option) => (
                <label
                  key={option.value}
                  className={`relative flex cursor-pointer rounded-lg border p-4 focus:outline-none ${
                    register('userType').value === option.value
                      ? 'border-blue-600 bg-blue-50'
                      : 'border-gray-300 bg-white hover:bg-gray-50'
                  }`}
                >
                  <input
                    type="radio"
                    value={option.value}
                    className="sr-only"
                    {...register('userType', { required: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞' })}
                  />
                  <span className="flex flex-1">
                    <span className="flex flex-col">
                      <span className="flex items-center text-sm font-medium text-gray-900">
                        <span className="mr-2 text-lg">{option.icon}</span>
                        {option.label}
                      </span>
                      <span className="text-sm text-gray-500">{option.description}</span>
                    </span>
                  </span>
                  <CheckIcon className="h-5 w-5 text-blue-600" />
                </label>
              ))}
            </div>
            {errors.userType && (
              <p className="mt-1 text-sm text-red-600">{errors.userType.message}</p>
            )}
          </div>

          {/* –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            </label>
            <select
              className="form-input"
              {...register('language')}
            >
              <option value="ru">–†—É—Å—Å–∫–∏–π</option>
              <option value="uz">O'zbekcha</option>
            </select>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–ª–µ—Ñ–æ–Ω–µ */}
          <div className="bg-gray-50 rounded-lg p-4">
            <div className="flex items-center space-x-2 text-sm text-gray-600">
              <span>üì±</span>
              <span>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <strong>{user?.phone}</strong></span>
            </div>
            <p className="text-xs text-gray-500 mt-1">
              –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
            </p>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex justify-end space-x-4 pt-4">
            <Button
              type="button"
              variant="secondary"
              onClick={() => window.location.reload()}
              disabled={loading}
            >
              –û—Ç–º–µ–Ω–∏—Ç—å
            </Button>
            <Button
              type="submit"
              loading={loading}
              disabled={loading || !isDirty}
            >
              {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
};

export default EditProfileForm;