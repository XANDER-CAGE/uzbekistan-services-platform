import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm, Controller } from 'react-hook-form';
import { useAuth } from '../../context/AuthContext';
import { categoriesService } from '../../services/categories';
import { ordersService } from '../../services/orders';
import Button from '../../components/ui/Button';
import Input from '../../components/ui/Input';
import { Card, CardContent, CardHeader } from '../../components/ui/Card';
import { 
  MapPinIcon, 
  CalendarIcon, 
  CurrencyDollarIcon,
  ClockIcon,
  PhotoIcon,
  ExclamationTriangleIcon
} from '@heroicons/react/24/outline';
import toast from 'react-hot-toast';

const CreateOrderPage = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [loading, setLoading] = useState(false);
  const [categoriesLoading, setCategoriesLoading] = useState(true);
  const [step, setStep] = useState(1);

  const {
    register,
    handleSubmit,
    watch,
    setValue,
    control,
    formState: { errors },
  } = useForm({
    defaultValues: {
      priceType: 'fixed',
      urgency: 'medium',
      publish: true
    }
  });

  const watchPriceType = watch('priceType');
  const watchBudgetFrom = watch('budgetFrom');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('CreateOrderPage mounted. User:', user);
    
    if (!user) {
      console.log('No user found, redirecting to login');
      navigate('/login');
      return;
    }
  
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const hasAccess = user.userType === 'customer' || 
                     user.userType === 'both' || 
                     user.userType === 'admin' ||
                     user.role === 'admin' ||
                     user.role === 'super_admin';
  
    if (!hasAccess) {
      console.log('User type not allowed:', user.userType);
      toast.error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤');
      navigate('/');
      return;
    }
  
    loadCategories();
  }, [user, navigate]);

  const loadCategories = async () => {
    try {
      setCategoriesLoading(true);
      console.log('Loading categories...');
      
      const response = await categoriesService.getCategoriesTree(true);
      console.log('Categories loaded:', response);
      
      setCategories(response);
    } catch (error) {
      console.error('Error loading categories:', error);
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    } finally {
      setCategoriesLoading(false);
    }
  };

  const onSubmit = async (data) => {
    if (!selectedCategory) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏');
      return;
    }

    console.log('Submitting order:', { ...data, categoryId: selectedCategory.id });
    setLoading(true);
    
    try {
      const orderData = {
        ...data,
        categoryId: selectedCategory.id,
        budgetFrom: data.budgetFrom ? Number(data.budgetFrom) : undefined,
        budgetTo: data.budgetTo ? Number(data.budgetTo) : undefined,
      };

      const response = await ordersService.createOrder(orderData);
      console.log('Order created successfully:', response);
      
      toast.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      navigate(`/orders/${response.id}`);
    } catch (error) {
      console.error('Create order error:', error);
      const message = error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞';
      toast.error(message);
    } finally {
      setLoading(false);
    }
  };

  const handleCategorySelect = (category) => {
    console.log('Category selected:', category);
    setSelectedCategory(category);
    setStep(2);
  };

  const priceTypeOptions = [
    {
      value: 'fixed',
      label: '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞',
      description: '–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—É–º–º–∞ –∑–∞ —Ä–∞–±–æ—Ç—É',
      icon: 'üí∞'
    },
    {
      value: 'hourly',
      label: '–ü–æ—á–∞—Å–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞',
      description: '–û–ø–ª–∞—Ç–∞ –∑–∞ —á–∞—Å —Ä–∞–±–æ—Ç—ã',
      icon: '‚è∞'
    },
    {
      value: 'negotiable',
      label: '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è',
      description: '–¶–µ–Ω–∞ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º',
      icon: 'ü§ù'
    }
  ];

  const urgencyOptions = [
    {
      value: 'low',
      label: '–ù–µ —Å—Ä–æ—á–Ω–æ',
      description: '–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏',
      color: 'text-green-600 bg-green-50 border-green-200'
    },
    {
      value: 'medium',
      label: '–û–±—ã—á–Ω–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å',
      description: '–í —Ç–µ—á–µ–Ω–∏–µ 1-3 –¥–Ω–µ–π',
      color: 'text-blue-600 bg-blue-50 border-blue-200'
    },
    {
      value: 'high',
      label: '–°—Ä–æ—á–Ω–æ',
      description: '–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è',
      color: 'text-orange-600 bg-orange-50 border-orange-200'
    },
    {
      value: 'urgent',
      label: '–û—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ',
      description: '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ',
      color: 'text-red-600 bg-red-50 border-red-200'
    }
  ];

  const renderCategoryStep = () => {
    if (categoriesLoading) {
      return (
        <div className="space-y-6">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...
            </h2>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {Array.from({ length: 6 }).map((_, index) => (
              <div key={index} className="animate-pulse">
                <div className="p-6 border border-gray-200 rounded-xl">
                  <div className="flex items-center space-x-3 mb-3">
                    <div className="w-12 h-12 bg-gray-200 rounded-xl"></div>
                    <div className="flex-1">
                      <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                      <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                    </div>
                  </div>
                  <div className="h-3 bg-gray-200 rounded w-full"></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      );
    }

    if (categories.length === 0) {
      return (
        <div className="space-y-6">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏
            </h2>
            <p className="text-gray-600">
              –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
            </p>
            <Button 
              onClick={loadCategories}
              className="mt-4"
            >
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          </div>
        </div>
      );
    }

    return (
      <div className="space-y-6">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">
            –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏
          </h2>
          <p className="text-gray-600">
            –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∞—è –ø–æ–º–æ—â—å –≤–∞–º –Ω—É–∂–Ω–∞
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {categories.map((category) => (
            <button
              key={category.id}
              onClick={() => handleCategorySelect(category)}
              className="p-6 text-left border border-gray-200 rounded-xl hover:border-primary-300 hover:shadow-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500"
            >
              <div className="flex items-center space-x-3 mb-3">
                <div 
                  className="w-12 h-12 rounded-xl flex items-center justify-center text-2xl"
                  style={{ backgroundColor: category.color || '#3B82F6' }}
                >
                  <span className="text-white">{category.iconUrl || 'üîß'}</span>
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold text-gray-900">{category.nameRu}</h3>
                  <p className="text-sm text-gray-500">{category.servicesCount || 0} —É—Å–ª—É–≥</p>
                </div>
              </div>
              {category.descriptionRu && (
                <p className="text-sm text-gray-600 line-clamp-2">
                  {category.descriptionRu}
                </p>
              )}
            </button>
          ))}
        </div>
      </div>
    );
  };

  const renderOrderForm = () => (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
      {/* –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div 
                className="w-10 h-10 rounded-lg flex items-center justify-center"
                style={{ backgroundColor: selectedCategory?.color || '#3B82F6' }}
              >
                <span className="text-white">{selectedCategory?.iconUrl || 'üîß'}</span>
              </div>
              <div>
                <h3 className="font-medium text-gray-900">{selectedCategory?.nameRu}</h3>
                <p className="text-sm text-gray-500">–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</p>
              </div>
            </div>
            <Button
              type="button"
              variant="ghost"
              size="sm"
              onClick={() => setStep(1)}
            >
              –ò–∑–º–µ–Ω–∏—Ç—å
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Card>
        <CardHeader>
          <h3 className="text-lg font-semibold text-gray-900">–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</h3>
        </CardHeader>
        <CardContent className="space-y-4">
          <Input
            label="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†–µ–º–æ–Ω—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞ Samsung"
            required
            error={errors.title?.message}
            {...register('title', {
              required: '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–∫–∞–∑–∞',
              minLength: {
                value: 10,
                message: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤'
              },
              maxLength: {
                value: 200,
                message: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤'
              }
            })}
          />

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ <span className="text-red-500">*</span>
            </label>
            <textarea
              className="block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm"
              rows={4}
              placeholder="–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."
              {...register('description', {
                required: '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
                minLength: {
                  value: 20,
                  message: '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤'
                },
                maxLength: {
                  value: 2000,
                  message: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 2000 —Å–∏–º–≤–æ–ª–æ–≤'
                }
              })}
            />
            {errors.description && (
              <p className="mt-1 text-sm text-red-600">{errors.description.message}</p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* –ë—é–¥–∂–µ—Ç */}
      <Card>
        <CardHeader>
          <div className="flex items-center space-x-2">
            <CurrencyDollarIcon className="w-5 h-5 text-primary-600" />
            <h3 className="text-lg font-semibold text-gray-900">–ë—é–¥–∂–µ—Ç</h3>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –¢–∏–ø —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            </label>
            <div className="space-y-3">
              {priceTypeOptions.map((option) => (
                <label
                  key={option.value}
                  className={`relative flex cursor-pointer rounded-lg border p-4 focus:outline-none ${
                    watchPriceType === option.value
                      ? 'border-primary-600 bg-primary-50'
                      : 'border-gray-300 bg-white hover:bg-gray-50'
                  }`}
                >
                  <input
                    type="radio"
                    value={option.value}
                    className="sr-only"
                    {...register('priceType')}
                  />
                  <span className="flex flex-1">
                    <span className="flex flex-col">
                      <span className="flex items-center text-sm font-medium text-gray-900">
                        <span className="mr-2 text-lg">{option.icon}</span>
                        {option.label}
                      </span>
                      <span className="text-sm text-gray-500">{option.description}</span>
                    </span>
                  </span>
                </label>
              ))}
            </div>
          </div>

          {watchPriceType !== 'negotiable' && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Input
                label="–ë—é–¥–∂–µ—Ç –æ—Ç (—Å—É–º)"
                type="number"
                placeholder="200000"
                min="1000"
                error={errors.budgetFrom?.message}
                {...register('budgetFrom', {
                  min: {
                    value: 1000,
                    message: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç 1000 —Å—É–º'
                  }
                })}
              />
              <Input
                label="–ë—é–¥–∂–µ—Ç –¥–æ (—Å—É–º)"
                type="number"
                placeholder="500000"
                min={watchBudgetFrom || "1000"}
                error={errors.budgetTo?.message}
                {...register('budgetTo', {
                  min: {
                    value: watchBudgetFrom || 1000,
                    message: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ'
                  }
                })}
              />
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ */}
      <Card>
        <CardHeader>
          <div className="flex items-center space-x-2">
            <MapPinIcon className="w-5 h-5 text-primary-600" />
            <h3 className="text-lg font-semibold text-gray-900">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h3>
          </div>
        </CardHeader>
        <CardContent>
          <Input
            label="–ê–¥—Ä–µ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç"
            placeholder="–≥. –¢–∞—à–∫–µ–Ω—Ç, –Æ–Ω—É—Å–∞–±–∞–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –ê–º–∏—Ä–∞ –¢–µ–º—É—Ä–∞ 15"
            required
            error={errors.address?.message}
            {...register('address', {
              required: '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å',
              minLength: {
                value: 10,
                message: '–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤'
              }
            })}
          />
        </CardContent>
      </Card>

      {/* –°—Ä–æ–∫–∏ */}
      <Card>
        <CardHeader>
          <div className="flex items-center space-x-2">
            <ClockIcon className="w-5 h-5 text-primary-600" />
            <h3 className="text-lg font-semibold text-gray-900">–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –°—Ä–æ—á–Ω–æ—Å—Ç—å
            </label>
            <div className="space-y-3">
              {urgencyOptions.map((option) => (
                <label
                  key={option.value}
                  className={`relative flex cursor-pointer rounded-lg border p-4 focus:outline-none ${
                    watch('urgency') === option.value
                      ? `border-current ${option.color}`
                      : 'border-gray-300 bg-white hover:bg-gray-50'
                  }`}
                >
                  <input
                    type="radio"
                    value={option.value}
                    className="sr-only"
                    {...register('urgency')}
                  />
                  <span className="flex flex-1">
                    <span className="flex flex-col">
                      <span className="text-sm font-medium text-gray-900">
                        {option.label}
                      </span>
                      <span className="text-sm text-gray-500">{option.description}</span>
                    </span>
                  </span>
                </label>
              ))}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Input
              label="–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"
              type="datetime-local"
              {...register('preferredStartDate')}
            />
            <Input
              label="–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫"
              type="datetime-local"
              {...register('deadline')}
            />
          </div>
        </CardContent>
      </Card>

      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      <div className="flex flex-col sm:flex-row gap-4 justify-end">
        <Button
          type="button"
          variant="outline"
          onClick={() => navigate(-1)}
          disabled={loading}
        >
          –û—Ç–º–µ–Ω–∞
        </Button>
        <Button
          type="submit"
          loading={loading}
          disabled={loading}
          className="px-8"
        >
          {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'}
        </Button>
      </div>
    </form>
  );

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑</h1>
          <p className="text-gray-600 mt-2">
            –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∞—Ç —Å–≤–æ–∏ —É—Å–ª—É–≥–∏
          </p>
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∞–≥–æ–≤ */}
        <div className="mb-8">
          <div className="flex items-center">
            <div className={`flex items-center ${step >= 1 ? 'text-primary-600' : 'text-gray-400'}`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center border-2 ${
                step >= 1 ? 'border-primary-600 bg-primary-600 text-white' : 'border-gray-300'
              }`}>
                1
              </div>
              <span className="ml-2 font-medium">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</span>
            </div>
            <div className={`flex-1 h-0.5 mx-4 ${step >= 2 ? 'bg-primary-600' : 'bg-gray-300'}`}></div>
            <div className={`flex items-center ${step >= 2 ? 'text-primary-600' : 'text-gray-400'}`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center border-2 ${
                step >= 2 ? 'border-primary-600 bg-primary-600 text-white' : 'border-gray-300'
              }`}>
                2
              </div>
              <span className="ml-2 font-medium">–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</span>
            </div>
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
        {step === 1 ? renderCategoryStep() : renderOrderForm()}
      </div>
    </div>
  );
};

export default CreateOrderPage;